import { ExportType } from '../../../../specification/common';
import { AnalyticalTable as AnalyticalTableConfig, TableALP as TableALPConfig, CommonTableSettings as CommonTableConfig, DefaultContentView, DefaultFilterMode, GenericColumns, GridTable as GridTableConfig, PopinLayout, QuickVariantSelectionX as QuickVariantSelectionXInterface, ResponsiveTable as ResponsiveTableConfig, TableTypeV2, TreeTable as TreeTableConfig, Strategy, QuickVariant, QuickVariantX, ToolBar } from '../../../../specification/v2';
import { ControlTypeFunction, DeprecatedProperties } from '../../../common';
export declare const getSmartTableControlId: (baseId: string, idBreadcrumbs: string[], _breadcrumbs: string[], controlType: ControlTypeFunction) => string;
export declare class CreateWithFilters {
    strategy: Strategy;
}
export declare function exportType(manifestSection: unknown, configPart: object): void;
export declare class QuickVariantSelection {
    showCounts?: boolean;
    variants: {
        [key: number]: QuickVariant;
    };
}
export declare class QuickVariantSelectionX implements QuickVariantSelectionXInterface {
    showCounts?: boolean;
    enableAutoBinding?: boolean;
    variants: {
        [key: number]: QuickVariantX;
    };
}
export declare class CommonTableSettings<COLS = GenericColumns> implements CommonTableConfig<COLS> {
    getDeprecated: () => DeprecatedProperties;
    showTablePersonalisation?: boolean;
    useExportToExcel?: boolean;
    exportType?: ExportType;
    fitContainer?: boolean;
    quickVariantSelection?: QuickVariantSelection;
    quickVariantSelectionX?: QuickVariantSelectionX;
    multiSelect?: boolean;
    selectAll?: boolean;
    selectionLimit?: number;
    enableAutoBinding?: boolean;
    condensedTableLayout?: boolean;
    enableTableFilterInPageVariant?: boolean;
    toolBar?: ToolBar;
}
export declare class ResponsiveTable extends CommonTableSettings implements ResponsiveTableConfig {
    type?: TableTypeV2.ResponsiveTable;
    createWithFilters?: CreateWithFilters;
    popinLayout?: PopinLayout;
    includeItemInSelection?: boolean;
    showDraftToggle?: boolean;
    growingThreshold?: number;
}
export declare class TreeTable extends CommonTableSettings implements TreeTableConfig {
    type?: TableTypeV2.TreeTable;
    showDraftToggle?: boolean;
}
export declare class AnalyticalTable extends CommonTableSettings implements AnalyticalTableConfig {
    type?: TableTypeV2.AnalyticalTable;
    qualifier?: string;
    defaultContentView?: DefaultContentView;
    defaultFilterMode?: DefaultFilterMode;
    contentTitle?: string;
    autoHide?: boolean;
    createWithFilters?: CreateWithFilters;
    showDraftToggle?: boolean;
}
export declare class TableALP extends CommonTableSettings implements TableALPConfig {
    type?: TableTypeV2.AnalyticalTable & TableTypeV2.ResponsiveTable & TableTypeV2.GridTable;
    qualifier?: string;
    defaultContentView?: DefaultContentView;
    defaultFilterMode?: DefaultFilterMode;
    contentTitle?: string;
    autoHide?: boolean;
}
export declare class ALPResponsiveTable extends TableALP {
    growingThreshold?: number;
}
export declare class ALPGridTable extends TableALP {
}
export declare class ALPAnalyticalTable extends TableALP {
}
export declare class GridTable extends CommonTableSettings implements GridTableConfig {
    type?: TableTypeV2.GridTable;
    createWithFilters?: CreateWithFilters;
    showDraftToggle?: boolean;
}
