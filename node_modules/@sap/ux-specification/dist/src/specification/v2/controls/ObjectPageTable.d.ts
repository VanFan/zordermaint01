import { GenericColumns, TableTypeV2, PopinLayout, QuickVariantSelection, QuickVariant } from './Table';
import { ObjectPageToolBar } from './ObjectPageToolBar';
import { ExportType } from '../../common/types';
export interface QuickVariantSelectionOP extends QuickVariantSelection {
    /**
     * To show the number of records available, set showCounts to true.
     */
    showCounts?: boolean;
    /**
     * The variants section contains a set of entries that point to SelectionVariants or SelectionPresentationVariants defined in the annotations.
     */
    variants: {
        [key: number]: QuickVariant;
    };
}
export declare enum CreateMode {
    inline = "inline"
}
export interface ObjectPageCommonTableSettings<COLS = GenericColumns> {
    /**
     *  With editable you can control if a table can be edited. It should be set to false for smart tables with non-editable content.
     */
    editable?: boolean;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
    /**
     * The 'Select All' button is disabled by default. To enable it, set selectAll to true.
     */
    selectAll?: boolean;
    /**
     * If new data needs to be loaded from the back-end system for this, the number of lines to be loaded is restricted to the specified limit. The default value for this limit is 200. If selectAll is true, the selection limit is not evaluated.
     */
    selectionLimit?: number;
    /**
     * With quickVariantSelection you can switch on the multiple view feature. It links to variants you must have been added to your annotations before.
     */
    quickVariantSelection?: QuickVariantSelectionOP;
    /**
     * useExportToExcel must be set to true if you want to export data to a spreadsheet application, for example Microsoft Excel.
     */
    useExportToExcel?: boolean;
    /**
     * Specifies the type of export to be used in the SmartTable control. UI5Client is the default option.
     */
    exportType?: ExportType;
    /**
     * Use createMode 'inline' to enable inline creation of table entries for draft enabled applications.
     */
    createMode?: CreateMode;
    /**
     * If createMode is set to inline, you can use this setting to disable the default sort order.
     */
    disableDefaultInlineCreateSort?: boolean;
    /**
     * Tool Bar
     */
    toolBar?: ObjectPageToolBar;
    /**
     * Columns
     */
    columns?: COLS;
}
/**
 * @controlProperty type
 */
export interface ObjectPageResponsiveTable extends ObjectPageCommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.ResponsiveTable;
    /**
     * Set includeItemInSelection to true if you want items to be selectable when clicked, rather than after the selection control has been set.
     */
    includeItemInSelection?: boolean;
    /**
     * popinLayout defines the layout in which the table pop-in rows shall be rendered.
     */
    popinLayout?: PopinLayout;
    /**
     * growingThreshold defines the number of items to be requested from the model for each grow. This property can only be used if the growing property is set to true.
     */
    growingThreshold?: number;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface ObjectPageAnalyticalTable extends ObjectPageCommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.AnalyticalTable;
    /**
     * For the analytical table, grid table and tree table you can decide on a condensed table layout by setting condensedTableLayout to true.
     */
    condensedTableLayout?: boolean;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface ObjectPageGridTable extends ObjectPageCommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.GridTable;
    /**
     * For the analytical table, grid table and tree table you can decide on a condensed table layout by setting condensedTableLayout to true.
     */
    condensedTableLayout?: boolean;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface ObjectPageTreeTable extends ObjectPageCommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.TreeTable;
    /**
     * For the analytical table, grid table and tree table you can decide on a condensed table layout by setting condensedTableLayout to true.
     */
    condensedTableLayout?: boolean;
}
