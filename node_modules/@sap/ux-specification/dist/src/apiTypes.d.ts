import { SchemaType } from './specification/schemaAccess';
import { FioriElementsVersion } from './specification/common/page';
import { Page as PageV2 } from './specification/v2/page';
import { FileData, File, ExportResults, ServiceMetadata } from './sync/common/types';
import { ApplicationV2, ObjectPageConfig as ObjectPageConfigV2, ListReportConfig as ListReportConfigV2, OverviewPageConfig as OverviewPageConfigV2, AnalyticalListPageConfig as AnalyticalListPageConfigV2, Manifest as ManifestV2, FlexChangeLayer } from './v2';
import { ConverterOutput } from '@sap-ux/vocabularies-types';
export declare type MessageMetadataType = (object | string | number)[];
/**
 * Interface used to define a logger for the specificaton API
 */
export interface ExtensionLogger {
    info: (message: string, ...meta: MessageMetadataType) => void;
    warning: (message: string, ...meta: MessageMetadataType) => void;
    error: (message: string, ...meta: MessageMetadataType) => void;
}
/**
 * Types for V2 schema generation
 */
export declare type GenerateListReportV2 = {
    [SchemaType.ListReport]: {
        genericSchema: object;
        entitySet: string;
        annotations: FileData[];
        manifest: object;
        fragments: FileData[];
        logger?: ExtensionLogger;
    };
};
export declare type GenerateObjectPageV2 = {
    [SchemaType.ObjectPage]: {
        genericSchema: object;
        entitySet: string;
        annotations: FileData[];
        manifest: object;
        service: ServiceMetadata;
        fragments: FileData[];
        logger?: ExtensionLogger;
    };
};
export declare type GenerateOverviewPageV2 = {
    [SchemaType.OverviewPage]: {
        genericSchema: object;
        logger?: ExtensionLogger;
    };
};
export declare type GenerateAnalyticalListPageV2 = {
    [SchemaType.AnalyticalListPage]: {
        genericSchema: object;
        entitySet: string;
        annotations: object[];
        manifest: object;
        fragments: FileData[];
        logger?: ExtensionLogger;
    };
};
export declare type GenerateSchemaV2Type = GenerateListReportV2 | GenerateObjectPageV2 | GenerateOverviewPageV2 | GenerateAnalyticalListPageV2;
export interface GenerateSchemaV2 {
    [FioriElementsVersion.v2]: GenerateSchemaV2Type;
}
/**
 * Union types for schema generation
 */
export declare type GenerateSchemaParameters = GenerateSchemaV2;
/**
 * Types for v2 export
 */
export declare type ExportListReportV2Parameters = {
    appId: string;
    page: PageV2;
    manifest: object;
    jsonSchema: object;
    fragments?: FileData[];
    logger?: ExtensionLogger;
};
export declare type ExportListReportV2 = {
    [SchemaType.ListReport]: ExportListReportV2Parameters;
};
export declare type ExportAnalyticalListPageV2Parameters = ExportListReportV2Parameters;
export declare type ExportAnalyticalListPageV2 = {
    [SchemaType.AnalyticalListPage]: ExportAnalyticalListPageV2Parameters;
};
export declare type ExportOverviewPageV2Parameters = {
    page: PageV2;
    manifest: object;
    jsonSchema: object;
    logger?: ExtensionLogger;
};
export declare type ExportOverviewPageV2 = {
    [SchemaType.OverviewPage]: ExportOverviewPageV2Parameters;
};
export declare type ExportObjectPageV2Parameters = {
    appId: string;
    page: PageV2;
    manifest: object;
    jsonSchema: object;
    fragments?: FileData[];
    logger?: ExtensionLogger;
};
export declare type ExportObjectPageV2 = {
    [SchemaType.ObjectPage]: ExportObjectPageV2Parameters;
};
export declare type ExportAppV2 = {
    [SchemaType.Application]: {
        application: ApplicationV2;
        manifest: object;
        jsonSchema: object;
        logger?: ExtensionLogger;
    };
};
export interface UI5Version {
    ui5Version?: string;
    layer?: FlexChangeLayer;
}
export declare type ExportParametersV2Type = ExportListReportV2 | ExportObjectPageV2 | ExportOverviewPageV2 | ExportAppV2 | ExportAnalyticalListPageV2;
export interface ExportParametersV2 {
    [FioriElementsVersion.v2]: ExportParametersV2Type;
}
/**
 * Union types for export
 */
export declare type ExportConfigParameters = UI5Version & ExportParametersV2;
/**
 * Types for v2 import
 */
export declare type ImportListReportV2Parameters = {
    manifest: object;
    flex: string[];
    jsonSchema: object;
    fragments?: FileData[];
    logger?: ExtensionLogger;
};
export declare type ImportListReportV2 = {
    [SchemaType.ListReport]: ImportListReportV2Parameters;
};
export declare type ImportObjectPageV2Parameters = {
    manifest: object;
    flex: string[];
    jsonSchema: object;
    entitySet: string;
    fragments?: FileData[];
    logger?: ExtensionLogger;
};
export declare type ImportObjectPageV2 = {
    [SchemaType.ObjectPage]: ImportObjectPageV2Parameters;
};
export declare type ImportOverviewPageV2Parameters = {
    manifest: object;
    jsonSchema: object;
    logger?: ExtensionLogger;
};
export declare type ImportOverviewPageV2 = {
    [SchemaType.OverviewPage]: ImportOverviewPageV2Parameters;
};
export declare type ImportALPV2Parameters = ImportListReportV2Parameters;
export declare type ImportAnalyticalListPageV2 = {
    [SchemaType.AnalyticalListPage]: ImportALPV2Parameters;
};
export declare type ImportParametersV2Type = ImportListReportV2 | ImportObjectPageV2 | ImportOverviewPageV2 | ImportAnalyticalListPageV2;
export interface ImportParametersV2 {
    [FioriElementsVersion.v2]: ImportParametersV2Type;
}
export declare type ImportResultsV2 = ListReportConfigV2 | ObjectPageConfigV2 | OverviewPageConfigV2 | AnalyticalListPageConfigV2;
export declare type ImportConfigParameters = ImportParametersV2;
export declare type ImportResults = ImportResultsV2;
/**
 * Types for project import
 */
export interface ImportProjectParameters {
    manifest: ManifestV2;
    annotations: FileData[];
    flex?: string[];
    fragments?: FileData[];
    logger?: ExtensionLogger;
}
export interface GenerateAppSchemaParameters {
    manifest: ManifestV2;
    serviceAVT: ConverterOutput;
    fioriElementsVersion: FioriElementsVersion;
    fragments?: FileData[];
    logger?: ExtensionLogger;
}
/**
 * API Version
 */
export interface ApiVersion {
    version?: string;
}
/**
 * API interface
 */
export interface Specification {
    getGenericSchema: (FioriElementsVersion: any, SchemaType: any) => Promise<JSON>;
    generateSchema: (GenerateSchemaParameters: any) => object;
    exportConfig: (ExportConfigParameters: any) => ExportResults;
    importConfig: (ImportConfigParameters: any) => ImportResults;
    importProject: (ImportProjectParameters: any) => Promise<File[]>;
    getApiVersion: () => ApiVersion;
    importProjectSchema: (ImportProjectParameters: any) => Promise<File[]>;
}
